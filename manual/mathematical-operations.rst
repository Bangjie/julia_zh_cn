.. _man-mathematical-operations:

******************
数学运算和基本函数
******************

Julia 为它所有的基础数值类型，提供了整套的基础算术和位运算，也提供了一套高效的
标准数学函数。

算术运算符
----------

下面的 `算术运算符
<http://en.wikipedia.org/wiki/Arithmetic#Arithmetic_operations>`_ 适用于所有的
基本数据类型:


+-----------+----------+------------------------+
| 表达式    | 名称     | 描述                   |
+===========+==========+========================+
| ``+x``    | 一元加法 | ``x`` 本身             |
+-----------+----------+------------------------+
| ``-x``    | 一元减法 | 相反数                 |
+-----------+----------+------------------------+
| ``x + y`` | 二元加法 | 做加法                 |
+-----------+----------+------------------------+
| ``x - y`` | 二元减法 | 做减法                 |
+-----------+----------+------------------------+
| ``x * y`` | 乘法     | 做乘法                 |
+-----------+----------+------------------------+
| ``x / y`` | 除法     | 做除法                 |
+-----------+----------+------------------------+
| ``x \ y`` | 反除     | 相当于 ``y / x``       |
+-----------+----------+------------------------+
| ``x ^ y`` | 乘方     | 将 ``x`` 自乘 ``y`` 次 |
+-----------+----------+------------------------+
| ``x % y`` | 取余     | 相当于 ``rem(x, y)``   |
+-----------+----------+------------------------+

Julia 的类型提升系统使得参数类型混杂的算术运算也很简单自然。详见
:ref:`man-conversion-and-promotion` 。


算术运算的例子： ::

    julia> 1 + 2 + 3
    6

    julia> 1 - 2
    -1

    julia> 3*2/12
    0.5

（习惯上，优先级低的运算，前后多补些空格。这是个人喜好，没有强制标准。）

位运算符
--------

下面的 `位运算符
<http://en.wikipedia.org/wiki/Bitwise_operation#Bitwise_operators>`_ 适用于所
有整数类型：

+-------------+---------------------------------------------------------------------------------+
| 表达式      | 名称                                                                            |
+=============+=================================================================================+
| ``~x``      | 取反                                                                            |
+-------------+---------------------------------------------------------------------------------+
| ``x & y``   | 按位与                                                                          |
+-------------+---------------------------------------------------------------------------------+
| ``x | y``   | 按位或                                                                          |
+-------------+---------------------------------------------------------------------------------+
| ``x $ y``   | 按位异或                                                                        |
+-------------+---------------------------------------------------------------------------------+
| ``x >>> y`` | 向右 `逻辑移位 <http://en.wikipedia.org/wiki/Logical_shift>`_ （高位补 0 ）     |
+-------------+---------------------------------------------------------------------------------+
| ``x >> y``  | 向右 `算术移位 <http://en.wikipedia.org/wiki/Arithmetic_shift>`_ （复制原高位） |
+-------------+---------------------------------------------------------------------------------+
| ``x << y``  | 向左逻辑/算术移位                                                               |
+-------------+---------------------------------------------------------------------------------+


位运算的例子： ::

    julia> ~123
    -124

    julia> 123 & 234
    106

    julia> 123 | 234
    251

    julia> 123 $ 234
    145

    julia> ~uint32(123)
    0xffffff84

    julia> ~uint8(123)
    0x84

复合赋值运算符
--------------

二元算术和位运算都有对应的复合赋值运算符, 即运算的结果将会被赋值给左操作数. 在
操作符的后面直接加上 ``=`` 就组成了复合赋值运算符. 例如, ``x += 3`` 相当于 ``x
= x + 3`` ::

      julia> x = 1
      1

      julia> x += 3
      4

      julia> x
      4

复合赋值运算符有： ::

    +=  -=  *=  /=  \= %= ^= &=  |=  $=  >>>=  >>=  <<=


.. _man-numeric-comparisons:

数值比较
--------

所有的基础数值类型都可以使用比较运算符：

+--------+----------+
| 运算符 | 名称     |
+========+==========+
| ``==`` | 等于     |
+--------+----------+
| ``!=`` | 不等于   |
+--------+----------+
| ``<``  | 小于     |
+--------+----------+
| ``<=`` | 小于等于 |
+--------+----------+
| ``>``  | 大于     |
+--------+----------+
| ``>=`` | 大于等于 |
+--------+----------+

一些例子： ::

    julia> 1 == 1
    true

    julia> 1 == 2
    false

    julia> 1 != 2
    true

    julia> 1 == 1.0
    true

    julia> 1 < 2
    true

    julia> 1.0 > 3
    false

    julia> 1 >= 1.0
    true

    julia> -1 <= 1
    true

    julia> -1 <= -1
    true

    julia> -1 <= -2
    false

    julia> 3 < -0.5
    false

整数是按位比较的。浮点数是按 `IEEE 754 标准 <http://zh.wikipedia.org/zh-cn/IEEE_754>`_ 比较的：

- 有限数按照正常方式做比较.
- 正数的零等于但不大于复数的零.
- ``Inf`` 等于它本身，并且大于所有数, 除了 ``NaN``.
- ``-Inf`` 等于它本身，并且小于所有数, 除了 ``NaN``.
- ``NaN`` 不等于、不大于、不小于任何数，包括它本身.

有关 ``NaN`` 的性质，值得留意： ::

    julia> NaN == NaN
    false

    julia> NaN != NaN
    true

    julia> NaN < NaN
    false

    julia> NaN > NaN
    false

对于想让 ``NaN`` 等于 ``NaN`` 的情况，比如哈希值比较，可以使用 ``isequal`` 函
数，它认为 ``NaN`` 等于它本身：::

    julia> isequal(NaN,NaN)
    true

或者, 函数 ``isran`` 可以直接测试是否等于 `NaN`: ::

    julia> isnan(NaN32)
    true

混合比较有符号整数, 无符号整数和浮点数非常棘手, 使用的时候需要特别小心.


链式比较
--------

与大多数语言不同，Julia 支持 `Python链式比较 <http://en.wikipedia.org/wiki/Python_syntax_and_semantics#Comparison_operators>`_ ： ::

    julia> 1 < 2 <= 2 < 3 == 3 > 2 >= 1 == 1 < 3 != 5
    true

对标量的比较，链式比较使用 ``&&`` 运算符；对逐元素的比较使用 ``&`` 运算符，此运算符也可用于数组。例如， ``0 .< A .< 1`` 的结果是一个对应的布尔数组，满足条件的元素为 true 。

注意链式比较的比较顺序： ::

    v(x) = (println(x); x)

    julia> v(1) < v(2) <= v(3)
    2
    1
    3
    true

    julia> v(1) > v(2) <= v(3)
    2
    1
    false

中间的值只计算了一次，而不是像 ``v(1) < v(2) && v(2) <= v(3)`` 一样计算了两次。链式比较的计算顺序是不确定的。不要在链式比较中使用带副作用（比如打印）的表达式。如果需要使用副作用表达式，推荐使用短路 ``&&`` 运算符（详见 :ref:`man-short-circuit-evaluation` ）。

.. _man-elementrary-functions:

基本函数
--------

Julia 提供了一系列数学函数和运算符：

舍入函数
~~~~~~~~

+---------------+---------------------------+----------+
| 函数          | 说明                      | 返回类型 |
+===============+===========================+==========+
| ``round(x)``  | 把 ``x`` 舍入到最近的整数 | 浮点数   |
+---------------+---------------------------+----------+
| ``iround(x)`` | 把 ``x`` 舍入到最近的整数 | 整数     |
+---------------+---------------------------+----------+
| ``floor(x)``  | 把 ``x`` 向 ``-Inf`` 取整 | 浮点数   |
+---------------+---------------------------+----------+
| ``ifloor(x)`` | 把 ``x`` 向 ``-Inf`` 取整 | 整数     |
+---------------+---------------------------+----------+
| ``ceil(x)``   | 把 ``x`` 向 ``+Inf`` 取整 | 浮点数   |
+---------------+---------------------------+----------+
| ``iceil(x)``  | 把 ``x`` 向 ``+Inf`` 取整 | 整数     |
+---------------+---------------------------+----------+
| ``trunc(x)``  | 把 ``x`` 向 0 取整        | 浮点数   |
+---------------+---------------------------+----------+
| ``itrunc(x)`` | 把 ``x`` 向 0 取整        | 整数     |
+---------------+---------------------------+----------+


除法函数
~~~~~~~~

+-----------------+---------------------------------------------------------------+
| 函数            | 说明                                                          |
+=================+===============================================================+
| ``div(x,y)``    | 截断取整除法；商向 0 舍入                                     |
+-----------------+---------------------------------------------------------------+
| ``fld(x,y)``    | 向下取整除法；商向 ``-Inf`` 舍入                              |
+-----------------+---------------------------------------------------------------+
| ``rem(x,y)``    | 除法余数；满足 ``x == div(x,y)*y + rem(x,y)`` ，与 ``x`` 同号 |
+-----------------+---------------------------------------------------------------+
| ``mod(x,y)``    | 取模余数；满足 ``x == fld(x,y)*y + mod(x,y)`` ，与 ``y`` 同号 |
+-----------------+---------------------------------------------------------------+
| ``gcd(x,y...)`` | ``x``, ``y``... 的最大公约数，与 ``x`` 同号                   |
+-----------------+---------------------------------------------------------------+
| ``lcm(x,y...)`` | ``x``, ``y``... 的最小公倍数，与 ``x`` 同号                   |
+-----------------+---------------------------------------------------------------+


符号和绝对值函数
~~~~~~~~~~~~~~~~

+-------------------+----------------------------------------------------+
| 函数              | 说明                                               |
+===================+====================================================+
| ``abs(x)``        | ``x`` 的幅值                                       |
+-------------------+----------------------------------------------------+
| ``abs2(x)``       | ``x`` 的幅值的平方                                 |
+-------------------+----------------------------------------------------+
| ``sign(x)``       | ``x`` 的正负号，返回值为 -1, 0, 或 +1              |
+-------------------+----------------------------------------------------+
| ``signbit(x)``    | 是否有符号位，有 (1) 或者 无 (0)                   |
+-------------------+----------------------------------------------------+
| ``copysign(x,y)`` | 返回一个数，它具有 ``x`` 的幅值， ``y`` 的符号位   |
+-------------------+----------------------------------------------------+
| ``flipsign(x,y)`` | 返回一个数，它具有 ``x`` 的幅值， ``x*y`` 的符号位 |
+-------------------+----------------------------------------------------+


乘方, 对数和开方

+----------------+------------------------------------------------------------------------+
| 函数           | 说明                                                                   |
+================+========================================================================+
| ``sqrt(x)``    | ``x`` 的平方根                                                         |
+----------------+------------------------------------------------------------------------+
| ``cbrt(x)``    | ``x`` 的立方根                                                         |
+----------------+------------------------------------------------------------------------+
| ``hypot(x,y)`` | 精确计算 ``sqrt(x^2 + y^2)``                                           |
+----------------+------------------------------------------------------------------------+
| ``exp(x)``     | 自然指数 ``e`` 的 ``x`` 次幂                                           |
+----------------+------------------------------------------------------------------------+
| ``expm1(x)``   | 当 ``x`` 接近 0 时，精确计算 ``exp(x)-1``                              |
+----------------+------------------------------------------------------------------------+
| ``ldexp(x,n)`` | 当 ``n`` 为整数时，高效计算``x*2^n``                                   |
+----------------+------------------------------------------------------------------------+
| ``log(x)``     | ``x`` 的自然对数                                                       |
+----------------+------------------------------------------------------------------------+
| ``log(b,x)``   | 以 ``b`` 为底 ``x`` 的对数                                             |
+----------------+------------------------------------------------------------------------+
| ``log2(x)``    | 以 2 为底 ``x`` 的对数                                                 |
+----------------+------------------------------------------------------------------------+
| ``log10(x)``   | 以 10 为底 ``x`` 的对数                                                |
+----------------+------------------------------------------------------------------------+
| ``log1p(x)``   | 当 ``x`` 接近 0 时，精确计算 ``log(1+x)``                              |
+----------------+------------------------------------------------------------------------+
| ``logb(x)``    | ``trunc(log2(x))``                                                     |
+----------------+------------------------------------------------------------------------+
| ``erf(x)``     | ``x`` 处的 `误差函数 <http://en.wikipedia.org/wiki/Error_function>`_   |
+----------------+------------------------------------------------------------------------+
| ``erfc(x)``    | 对于大 ``x`` ，精确计算 ``1-erf(x)``                                   |
+----------------+------------------------------------------------------------------------+
| ``gamma(x)``   | ``x`` 处的 `gamma 函数 <http://en.wikipedia.org/wiki/Gamma_function>`_ |
+----------------+------------------------------------------------------------------------+
| ``lgamma(x)``  | 对于大 ``x`` ，精确计算 ``log(gamma(x))``                              |
+----------------+------------------------------------------------------------------------+

为什么要有 ``hypot``, ``expm1``, ``log1p``, ``erfc`` 等函数，参见 John D. Cook 的博客： `expm1, log1p, erfc <http://www.johndcook.com/blog/2010/06/07/math-library-functions-that-seem-unnecessary/>`_ 和 `hypot <http://www.johndcook.com/blog/2010/06/02/whats-so-hard-about-finding-a-hypotenuse/>`_ 。

三角函数和双曲函数
~~~~~~~~~~~~~~~~~~

Julia 内置了所有的标准三角函数和双曲函数 ::

    sin    cos    tan    cot    sec    csc
    sinh   cosh   tanh   coth   sech   csch
    asin   acos   atan   acot   asec   acsc
    acoth  asech  acsch  sinc   cosc   atan2

除了 `atan2 <http://zh.wikipedia.org/zh-cn/Atan2>`_ 之外，都是单参数函数。 ``atan2`` 给出了 *x* 轴，与由 *x* 、 *y* 确定的点之间的 `弧度 <http://zh.wikipedia.org/zh-cn/%E5%BC%A7%E5%BA%A6>`_ 。

如果想要以度为单位计算三角函数 (默认为弧度)，使用带 ``d`` 后缀的函数。例如，
``sind(x)`` 计算 ``x`` 的正弦值， 这里``x`` 的单位是度。以下的列表是全部的以度
为单位的三角函数 ::

    sind  cosd  tand  cotd  secd  cscd
    asind acosd atand acotd asecd ascsd
